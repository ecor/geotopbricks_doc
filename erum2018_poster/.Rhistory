a <- NULL
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gval
str(gval)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
str(swc)
head(swc)
head(obs)
head(ltk)
ltk[,var]
var <- 'soil_moisture_content_200'
ivar <- which(ltk$obs_var==var)
gtkw  <- ltk[ivar,"geotop_where"]
depth <- ltk[ivar,"geotop_where"]
gtks <- str_split(gtkw,"[+]")[[1]]
gval <- get.geotop.inpts.keyword.value(gtks,wpath=wpath_B2,data.frame=TRUE,date_field="Date12.DDMMYYYYhhmm.",tz=tz, zlayer.formatter="z%04d")
swc_sim <- do.call(args=gval,what="+")
ivar
ltk[,ivar]
ltk[ivar,]
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
str(swc_sim)
str(swc_obs)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
str(swc_sim)
depth
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
ste(swc_sim)
ste(swc_sim)
str(swc_obs)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
head(df)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
head(dfm)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gg
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gg
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gg
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gg
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
gg
help(geotopGOF)
hydroGOF(obs=df$obs,sim=df$sim)
gof(obs=df$obs,sim=df$sim)
t(gof(obs=df$obs,sim=df$sim))
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopbricks.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
ltk
out <- geotopLookUpTable(wpath = wpath , save_rData = TRUE)
out <- geotopLookUpTable(wpath = wpath_sim , save_rData = TRUE)
str(out)
head(out)
out <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
head(out)
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(df),var)
df <- data.frame(time=index(om))
vv
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),var)
str(om[vv])
vv
str(om[,vv])
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),var)
df <- as.data.frame(om)
df$time <- index(om)
dfm <- melt(df,id="time")
gmodobs_e <- ggplot(data=dfm,aes(x=time,y=value,col=variable))+geom_line()+theme_bw()+ggtitle("Real Evapotranspiration vs Time")+ylab("swc")
gmodobs_e
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),var)
df <- as.data.frame(om[,vv])
df$time <- index(om)
dfm <- melt(df,id="time")
gmodobs_e <- ggplot(data=dfm,aes(x=time,y=value,col=variable))+geom_line()+theme_bw()+ggtitle("Real Evapotranspiration vs Time")+ylab("latent heat flux [W/m2]")
gmodobs_e
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),vare)
df <- as.data.frame(om[,vv])
df$time <- index(om)
dfm <- melt(df,id="time")
gmodobs_e <- ggplot(data=dfm,aes(x=time,y=value,col=variable))+geom_line()+theme_bw()+ggtitle("Real Evapotranspiration vs Time")+ylab("latent heat flux [W/m2]")
gmodobs_e
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),vare)
df <- as.data.frame(om[,vv])
df$time <- index(om)
df <- df[year(df$time)==2015,]
library(lubridate)
vare <- 'latent_heat_flux_in_air'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),vare)
df <- as.data.frame(om[,vv])
df$time <- index(om)
df <- df[year(df$time)==2015,]
dfm <- melt(df,id="time")
gmodobs_e <- ggplot(data=dfm,aes(x=time,y=value,col=variable))+geom_line()+theme_bw()+ggtitle("Real Evapotranspiration vs Time")+ylab("latent heat flux [W/m2]")
gmodobs_e
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopoptim2.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
library(flexdashboard)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
f <- 2.7
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_geotopbricks.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
webshot::webshot(url=file_url,file=file_png,vwidth = width,vheight = height)
require(jpeg)
img<-readJPEG("myfile.jpeg")
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
install.packages("jpg")
require(jpeg)
img<-readJPEG("myfile.jpeg")
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
library(jpg)
library(jpeg)
require(jpeg)
img<-readJPEG("myfile.jpeg")
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
img <- 'resources/images/geotopoptim_v2_.png'
require(jpeg)
img<-readJPEG("myfile.jpeg")
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
img <- jpeg('resources/images/geotopoptim_v2_.png')
img
#!/usr/bin/env Rscript
# file appendSmetData.R
#
# This script creates a graph of the package function and thair main external depencies
#
# author: Emanuele Cordano on 09-09-2015
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################
rm(list=ls())
library(geotopOptim2)
library(igraph)
set.seed(123)
list_envs <- list(environment(geotopExec),environment(get.geotop.inpts.keyword.value),environment(gof),environment(hydroPSO),environment(writeLines),environment(read.table),environment(terrain))
names(list_envs) <- c("geotopOptim2","geotopbricks","hydroGOF","hydroPSO","base","utils","raster")
color <- c("red","green","blue","orange","yellow","white","brown")
names(color) <- names(list_envs)
list_names <- lapply(X=list_envs,FUN=function(x){ls(env=x)})
list_df <- list()
for (it in names(list_envs)) {
list_df[[it]]	<- data.frame(funx=list_names[[it]],env=it,color=color[it],stringsAsFactors=FALSE)
}
df <- do.call(what=rbind,args=list_df)
##### SEMPLIFICATE DF
onlyfun <- list(hydroGOF=c("gof"),hydroPSO=c("hydroPSO","lhoat"),geotopbricks=c("get.geotop.inpts.keyword.value"),
base=c("writeLines","readLines"),utils=c("read.table"),raster="raster") ### read.table was removed
for (it in names(onlyfun)) {
cond  <- ((df$env==it) & (df$funx %in% onlyfun[[it]])) | (df$env!=it)
df    <- df[cond,]
}
fun_names <- df$funx
names(fun_names) <- fun_names
########################################
########################################
########################################
########################################
########################################
lfunx <- lapply(X=fun_names,FUN=function(x,nx) {
o <- try(get(x),silent=TRUE)
if (class(o)=="try-error") {
o <- NA ### "It looks like a method!"
return(o)
}
o <- formals(o)
o <- lapply(X=o,FUN=as.character)
o <- unlist(o)
o <- o[o %in% nx]
src <-  as.character(body(x))
src <-  unlist(str_split(src, boundary("word")))
nx <-  src[src %in% nx]
o <- c(o,nx)
o <- unique(o)
return(o)
},nx=fun_names)
for (it in names(lfunx)) {
temp <- lfunx[[it]]
ii <- which(temp!=it)
temp <- temp[ii]
nl <- length(temp)
lfunx[[it]] <- array(c(rep(it,nl),temp),c(nl,2))
}
#####edges
edges <- do.call(rbind,lfunx)
vertices <- unique(edges)
#####
env_base <- "base;utils"
df$env[df$env=="base"]  <- env_base
df$env[df$env=="utils"] <- env_base
df$color[df$env==env_base] <- "white"
#####
color_ <- df$color
env_   <- df$env
names(color_) <- df$funx
names(env_) <- df$funx
######
gg <- graph_from_edgelist(edges)
vnames <- V(gg)$name
V(gg)$color <- color_[vnames]
vcodes <- sprintf("%02d",1:length(vnames))
names(vcodes) <- vnames
V(gg)$name <- vcodes
main <- "geeotopOptim2  Internal Functions"
plot(gg,main=main)
legend("bottomleft",legend=unique(env_),fill=unique(color_),ncol=2)
legend("topleft",legend=paste(vcodes,vnames,sep=" : "),ncol=3,cex=0.6)
plot(gg,main=main)
require(jpeg)
img<-readJPEG("myfile.jpeg")
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
help(png)
img <- readJPEG("resources/images/geotopoptim_v2_.png")
img
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(img,2,2,4,4)
img
imgs <- readJPEG("resources/images/geotopoptim_v2_.png")
imgs
#now open a plot window with coordinates
plot(1:10,ty="n")
#specify the position of the image through bottom-left and top-right coords
rasterImage(imgs,2,2,4,4)
plot(1:10,1:10\)
plot(1:10,1:10)
#now open a plot window with coordinatesrasterImage(imgs,2,2,4,4)
rasterImage(imgs,2,2,4,4)
rasterImage(imgs,2,2,4,4)
imgs
imgs <- readJPEG("resources/images/geotopoptim_v2_.png")
aas <- readJPEG("resources/images/geotopoptim_v2_.png")
aas
rasterImage(aas,2,2,4,4)
dev.off()
rasterImage(aas,2,2,4,4)
help(rasterImage)
require(grDevices)
## set up the plot region:
op <- par(bg = "thistle")
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
image <- as.raster(matrix(0:1, ncol = 5, nrow = 3))
rasterImage(image, 100, 300, 150, 350, interpolate = FALSE)
rasterImage(image, 100, 400, 150, 450)
rasterImage(image, 200, 300, 200 + xinch(.5), 300 + yinch(.3),
interpolate = FALSE)
rasterImage(image, 200, 400, 250, 450, angle = 15, interpolate = FALSE)
par(op)
class(image)
as.raster('resources/images/geotopoptim_v2_.png')
install.packages("png")
pp <- png::readPNG('resources/images/geotopoptim_v2.png')
require(grDevices)
## set up the plot region:
op <- par(bg = "thistle")
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
image <- as.raster(matrix(0:1, ncol = 5, nrow = 3))
rasterImage(image, 100, 300, 150, 350, interpolate = FALSE)
rasterImage(image, 100, 400, 150, 450)
rasterImage(image, 200, 300, 200 + xinch(.5), 300 + yinch(.3),
interpolate = FALSE)
rasterImage(pp, 200, 400, 250, 450, angle = 15, interpolate = FALSE)
#!/usr/bin/env Rscript
# file appendSmetData.R
#
# This script creates a graph of the package function and thair main external depencies
#
# author: Emanuele Cordano on 09-09-2015
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################
rm(list=ls())
library(geotopOptim2)
library(igraph)
set.seed(123)
list_envs <- list(environment(geotopExec),environment(get.geotop.inpts.keyword.value),environment(gof),environment(hydroPSO),environment(writeLines),environment(read.table),environment(terrain))
names(list_envs) <- c("geotopOptim2","geotopbricks","hydroGOF","hydroPSO","base","utils","raster")
color <- c("red","green","blue","orange","yellow","white","brown")
names(color) <- names(list_envs)
list_names <- lapply(X=list_envs,FUN=function(x){ls(env=x)})
list_df <- list()
for (it in names(list_envs)) {
list_df[[it]]	<- data.frame(funx=list_names[[it]],env=it,color=color[it],stringsAsFactors=FALSE)
}
df <- do.call(what=rbind,args=list_df)
##### SEMPLIFICATE DF
onlyfun <- list(hydroGOF=c("gof"),hydroPSO=c("hydroPSO","lhoat"),geotopbricks=c("get.geotop.inpts.keyword.value"),
base=c("writeLines","readLines"),utils=c("read.table"),raster="raster") ### read.table was removed
for (it in names(onlyfun)) {
cond  <- ((df$env==it) & (df$funx %in% onlyfun[[it]])) | (df$env!=it)
df    <- df[cond,]
}
fun_names <- df$funx
names(fun_names) <- fun_names
########################################
########################################
########################################
########################################
########################################
lfunx <- lapply(X=fun_names,FUN=function(x,nx) {
o <- try(get(x),silent=TRUE)
if (class(o)=="try-error") {
o <- NA ### "It looks like a method!"
return(o)
}
o <- formals(o)
o <- lapply(X=o,FUN=as.character)
o <- unlist(o)
o <- o[o %in% nx]
src <-  as.character(body(x))
src <-  unlist(str_split(src, boundary("word")))
nx <-  src[src %in% nx]
o <- c(o,nx)
o <- unique(o)
return(o)
},nx=fun_names)
for (it in names(lfunx)) {
temp <- lfunx[[it]]
ii <- which(temp!=it)
temp <- temp[ii]
nl <- length(temp)
lfunx[[it]] <- array(c(rep(it,nl),temp),c(nl,2))
}
#####edges
edges <- do.call(rbind,lfunx)
vertices <- unique(edges)
#####
env_base <- "base;utils"
df$env[df$env=="base"]  <- env_base
df$env[df$env=="utils"] <- env_base
df$color[df$env==env_base] <- "white"
#####
color_ <- df$color
env_   <- df$env
names(color_) <- df$funx
names(env_) <- df$funx
######
gg <- graph_from_edgelist(edges)
vnames <- V(gg)$name
V(gg)$color <- color_[vnames]
vcodes <- sprintf("%02d",1:length(vnames))
names(vcodes) <- vnames
V(gg)$name <- vcodes
main <- "geeotopOptim2  Internal Functions"
plot(gg,main=main)
legend("bottomleft",legend=unique(env_),fill=unique(color_),ncol=2)
legend("topleft",legend=paste(vcodes,vnames,sep=" : "),ncol=3,cex=0.6)
pp <- png::readPNG('resources/images/geotopoptim_v2.png')
rasterImage(pp, 200, 400, 250, 450, angle = 15, interpolate = FALSE)
plot(gg,main=main)
rasterImage(pp, 200, 400, 250, 450, angle = 15, interpolate = FALSE)
help(rasterImage)
plot(gg,main=main)\
plot(gg,main=main)
legend("bottomleft",legend=unique(env_),fill=unique(color_),ncol=2)
legend("topleft",legend=paste(vcodes,vnames,sep=" : "),ncol=3,cex=0.6)
pp
rasterImage(pp, 1, 400, 250, 450, angle = 15, interpolate = FALSE)
rasterImage(pp, 1, 0,0,1,1, angle = 15, interpolate = FALSE)
rasterImage(pp, 1, 0,0,1,1, angle = 0, interpolate = FALSE)
rasterImage(pp, xleft=1, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
rasterImage(pp, xleft=0, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
plot(gg,main=main)
rasterImage(pp, xleft=0, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
rasterImage(pp, xleft=1, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
dim(pp)
rasterImage(pp, xleft=0, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
xleft <- 1
rasterImage(pp, xleft=xleft, ybottom=0,xright=0,ytop=1, angle = 0, interpolate = FALSE)
xleft <- 1
ncol(pp)
main <- "geeotopOptim2  Internal Functions"
plot(gg,main=main)
legend("bottomleft",legend=unique(env_),fill=unique(color_),ncol=2)
legend("topleft",legend=paste(vcodes,vnames,sep=" : "),ncol=3,cex=0.6)
pp <- png::readPNG('resources/images/geotopoptim_v2.png')
xleft <- 1
xright <- xleft+ncol(pp)-1
ybottom + 0
plot(gg,main=main)
legend("bottomleft",legend=unique(env_),fill=unique(color_),ncol=2)
legend("topleft",legend=paste(vcodes,vnames,sep=" : "),ncol=3,cex=0.6)
pp <- png::readPNG('resources/images/geotopoptim_v2.png')
xleft <- 1
xright <- xleft+ncol(pp)-1
ybottom = 0
ytop= ybottom+nrow(pp)-1
rasterImage(pp, xleft=xleft, ybottom=ybottom,xright=xright,ytop=ytop, angle = 0, interpolate = FALSE)
plot(gg,main=main)
rasterImage(pp, xleft=xleft, ybottom=ybottom,xright=xright,ytop=ytop, angle = 0, interpolate = FALSE)
rasterImage(pp, xleft=xleft, ybottom=ybottom,xright=xright,ytop=ytop, angle = 0, interpolate = FALSE)
rasterImage(pp, xleft=xleft, ybottom=ybottom,xright=xright,ytop=ytop, angle = 0, interpolate = FALSE)
wpath_sim <- "resources/simulation/Matsch_B2_Ref_007_GPPE"
tz="Etc/GMT-1"
vare <- 'soil_moisture_content_200'
om <- geotopLookUpTable(wpath = wpath_sim ,tz=tz)
vv <- str_detect(names(om),vare)
df <- as.data.frame(om[,vv])
df$time <- index(om)
df <- df[year(df$time) %in% c(2014,2015),]
dfm <- melt(df,id="time")
str(df)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
names(df) <- c("obs","sim","time")
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
help(wepshot)
help(webshot)
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
source('~/Dropbox/R-packages/geotopOptim2/inst/poster/my_poster/script_webshot.R')
